FROM nvidia/cuda:10.2-cudnn8-devel-ubuntu18.04 

# Install system dependencies
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        apt-transport-https \
        ca-certificates \
        cmake \
        curl \
        git \
        gnupg \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libtbb-dev \
        libzmq3-dev \
    && apt-get clean

ENV BAZEL_VER=3.7.2

# Install Bazel
RUN curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > bazel.gpg && \
    mv bazel.gpg /etc/apt/trusted.gpg.d/ && \
    echo "deb [arch=amd64] https://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list && \
    apt-get update && \
    apt-get install -y bazel-$BAZEL_VER && \
    apt-get clean && \
    ln -s /usr/bin/bazel-3.7.2 /usr/bin/bazel && \
    apt update && apt install bazel-3.7.2

# By default running container starts bash shell
CMD [ "/bin/bash" ]

# Install miniconda
ENV LANG=C.UTF-8 LC_ALL=C.UTF-8

ENV PATH /opt/conda/bin:$PATH

ENV CONDA_VERSION=py38_4.9.2
ENV CONDA_MD5=122c8c9beb51e124ab32a0fa6426c656

RUN curl -s https://repo.anaconda.com/miniconda/Miniconda3-${CONDA_VERSION}-Linux-x86_64.sh -o miniconda.sh && \
    echo "${CONDA_MD5}  miniconda.sh" > miniconda.md5 && \
    if ! md5sum --status -c miniconda.md5; then exit 1; fi && \
    mkdir -p /opt && \
    sh miniconda.sh -b -p /opt/conda && \
    rm miniconda.sh miniconda.md5 && \
    ln -s /opt/conda/etc/profile.d/conda.sh /etc/profile.d/conda.sh && \
    echo ". /opt/conda/etc/profile.d/conda.sh" >> ~/.bashrc && \
    echo "conda activate base" >> ~/.bashrc && \
    find /opt/conda/ -follow -type f -name '*.a' -delete && \
    find /opt/conda/ -follow -type f -name '*.js.map' -delete && \
    /opt/conda/bin/conda clean -afy

WORKDIR /opt

# Make RUN commands use `bash --login`: -- fixes conda init
# https://pythonspeed.com/articles/activate-conda-dockerfile/
SHELL ["/bin/bash", "--login", "-c"]

# Prevent python from loading packages from outside the container
# default empty pythonpath
ENV PYTHONPATH=/ignore/pythonpath

## Tensorflow installation
# For CUDA profiling, TensorFlow requires CUPTI.
ENV LD_LIBRARY_PATH /usr/include:/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/lib64:$LD_LIBRARY_PATH

# Link the libcuda stub to the location where tensorflow is searching for it and reconfigure
# dynamic linker run-time bindings
RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 \
    && echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/z-cuda-stubs.conf \
    && ldconfig

# Install HOOMD and tensorflow deps
RUN conda install -c conda-forge numpy=1.19.5 pip=20 python=3.7 wheel && \
    python --version && \
    python -m pip install --no-deps keras_preprocessing

# Set TF env variables
ENV PYTHON_BIN_PATH=/opt/conda/bin/python3 \
    PYTHON_LIB_PATH=/opt/conda/lib/python3.7/site-packages \
    # P100 -> 6.0, V100 -> 7.0
    TF_NEED_CUDA=1 \
    CUDA_TOOLKIT_PATH=/usr/local/cuda-10.2 \
    TF_CUDNN_VERSION=8.1.1 \
    CUDANN_INSTALL_PATH=/usr/include \
    TF_CUDA_COMPUTE_CAPABILITIES=3.5,6.0,7.0 \
    TF_CUDA_VERSION=10.2 \
    GCC_HOST_COMPILER_PATH=/usr/bin/gcc \
    CC_OPT_FLAGS="--config=cuda" \
    TF_NEED_TENSORRT=0 \
    TF_NEED_ROCM=0 \
    TMP=/tmp \
    TMP_DIR=/tmp \
    TF_SET_ANDROID_WORKSPACE=0

# Clone Tensorflow
# https://github.com/tensorflow/tensorflow/pull/48393
RUN git clone --depth 1 -b master https://github.com/tensorflow/tensorflow.git && \
    cd tensorflow && \
    git fetch --depth 1 origin pull/48393/head:pr48393 && \
    git checkout pr48393

# Run bazel build
RUN cd tensorflow && \
    ./configure && \
    bazel build --config=opt --config=cuda //tensorflow/tools/pip_package:build_pip_package

# Clone HOOMD
ENV HOOMD_TAG=v2.9.4

RUN git clone --recursive https://github.com/glotzerlab/hoomd-blue.git -b $HOOMD_TAG --single-branch && \
    cd hoomd-blue && \
    git submodule update

# Link HOOMD-TF in HOOMD/hoomd modules
RUN git clone -b cg_properties_update --single-branch https://github.com/ur-whitelab/hoomd-tf.git && \
    ln -s /opt/hoomd-tf/htf /opt/hoomd-blue/hoomd

# Install HOOMD
#RUN cd hoomd-blue && \
#    mkdir build && \
#    cd build && \
#    cmake ../ -DENABLE_MPI=OFF \
#              -DENABLE_CUDA=ON \
#              -DPYTHON_EXECUTABLE=/opt/conda/bin/python3.7 \
#              -DCMAKE_C_COMPILER=$(which gcc) \
#              -DCMAKE_CXX_COMPILER=$(which g++) \
#              -DCMAKE_INSTALL_PREFIX=/opt/conda/lib/python3.7/site-packages \
#              -DBUILD_HPMC=OFF \
#              -DBUILD_JIT=OFF \ 
#              -DBUILD_METAL=OFF \ 
#              -DBUILD_DEM=OFF \
#              -DBUILD_CGCMM=OFF \
#              -DBUILD_DEPRECATED=OFF \
#              -DBUILD_MPCD=OFF && \
#    make && \
#    make install
#
